defmodule When.Lexer do
  @moduledoc """
  Uses lexer generated by 'leex' erlang tool based on specification defined in
  "src/when_lexer.xrl" to break given string expression into a list of tokens
  suitable for further syntax analysis by Parser module.
  """

  def tokenize(string_expression) do
    string_expression
    |> to_charlist()
    |> :when_lexer.string()
    |> case do
      {:ok, tokens, _} -> {:ok, tokens}
      error -> pretty_error(error)
    end
  end

  defp pretty_error({:error, {line_no, :when_lexer, {:illegal, characters}}, _no}) do
    {:error,
     "Lexical error on line #{line_no}. - " <>
       "Illegal characters: '#{to_str(characters)}'."}
  end

  defp pretty_error({:error, error}) do
    {:error, "Lexical error - Unrecongnized error: #{inspect(error)}"}
  end

  defp pretty_error(error) do
    {:error, "Lexical error - Unrecongnized error: #{inspect(error)}"}
  end

  defp to_str(value) when is_binary(value), do: value

  defp to_str(value) when is_list(value) do
    if List.ascii_printable?(value) do
      List.to_string(value)
    else
      "#{inspect(value)}"
    end
  end

  defp to_str(value), do: "#{inspect(value)}"
end
